#pragma version >=0.4.0;
#include "imports/stdlib.fc";
#include "imports/constants.fc";
#include "imports/utils.fc";


global slice storage::owner_address;
global slice storage::sale_address;
global int   storage::init?;
global int   storage::sale_end_time;
global int   storage::collected_ton;


() load_data() impure inline {
    slice ds = get_data().begin_parse();

    storage::owner_address      = ds~load_msg_addr();
    storage::sale_address       = ds~load_msg_addr();
    storage::sale_end_time      = ds~load_uint(32);

    storage::init?              = ds~load_int(1);
    if (storage::init?) {
        storage::collected_ton  = ds~load_coins();
    }
}


() save_data() impure {
    set_data(
        begin_cell()
            .store_slice(storage::owner_address)
            .store_slice(storage::sale_address)
            .store_uint(storage::sale_end_time, 32)
            .store_int(true, 1)
            .store_coins(storage::collected_ton)
        .end_cell()
    );
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ;; Default SBT start
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    load_data();

    ifnot (storage::init?) {
        throw_unless(405, equal_slices(sender_address, storage::sale_address));
        storage::collected_ton = 0;
        save_data();
        return ();
    }

    if (in_msg_body.slice_empty?()) {
        send_excess(storage::owner_address, cur_lt(), 0, mode::carry_remaining_gas);
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::update_ref_wallet) {
        throw_unless(exc::incorrect_sender, equal_slices(sender_address, storage::sale_address));
        storage::collected_ton += in_msg_body~load_coins();

        send_excess(storage::owner_address, query_id , 0, mode::carry_remaining_gas);
        save_data();
        return ();
    }
    
    if (op == op::claim_ref) {
        throw_unless(exc::incorrect_sender, equal_slices(storage::owner_address, sender_address));
        throw_unless(exc::sale_not_finished, now() >= storage::sale_end_time);
        throw_unless(exc::nothing_to_claim, storage::collected_ton > min_tons_for_storage);
        
        builder claim_msg_body = begin_cell()
                                    .store_uint(op::claim_ref, 32)
                                    .store_uint(query_id, 64)
                                    .store_slice(storage::owner_address)
                                    .store_coins(storage::collected_ton);
        send_builder_message(storage::sale_address, 0, claim_msg_body, mode::carry_remaining_balance);  
       
        storage::collected_ton = 0;
        save_data();
        return (); 
    }

    throw(0xffff);
}


;;
;;  GET Methods
;;

;; (int, int, slice, slice, cell) get_nft_data() method_id {
;;     load_data();
;;     return (storage::init?, storage::index, storage::sale_address, storage::owner_address, storage::content);
;; }

;; slice get_authority_address() method_id {
;;     load_data();
;;     return storage::authority_address;
;; }

;; int get_revoked_time() method_id {
;;     load_data();
;;     return storage::revoked_at;
;; }


(int, slice, slice, int, int) get_storage_data() method_id {
    load_data();

    return (
        storage::init?,
        storage::owner_address,
        storage::sale_address,
        storage::sale_end_time,
        storage::collected_ton
    );      
}
