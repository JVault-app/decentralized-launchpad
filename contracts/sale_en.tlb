//=======================================================================
/// BASIC
// https://github.com/ton-blockchain/ton/blob/master/crypto/block/block.tlb

bool_false$0 = Bool;
bool_true$1 = Bool;

nothing$0 {X:Type} = Maybe X;
just$1 {X:Type} value:X = Maybe X;


left$0 {X:Type} {Y:Type} value:X = Either X Y;
right$1 {X:Type} {Y:Type} value:Y = Either X Y;

addr_none$00 = MsgAddressExt;
addr_extern$01 len:(## 9) external_address:(bits len)
             = MsgAddressExt;
anycast_info$_ depth:(#<= 30) { depth >= 1 }
   rewrite_pfx:(bits depth) = Anycast;
addr_std$10 anycast:(Maybe Anycast)
   workchain_id:int8 address:bits256  = MsgAddressInt;
addr_var$11 anycast:(Maybe Anycast) addr_len:(## 9)
   workchain_id:int32 address:(bits addr_len) = MsgAddressInt;
_ _:MsgAddressInt = MsgAddress;
_ _:MsgAddressExt = MsgAddress;

var_uint$_ {n:#} len:(#< n) value:(uint (len * 8))
         = VarUInteger n;
var_int$_ {n:#} len:(#< n) value:(int (len * 8))
        = VarInteger n;
nanograms$_ amount:(VarUInteger 16) = Grams;

_ grams:Grams = Coins;

optional_nothing$_ {X: Type} = Optional X;
optional_something$_ {X: Type} value:X = Optional X;

// =======================================================================
// jettons

jetton_transfer_notification#7362d09c {Payload: Type}
    query_id:uint64
    amount:Coins
    sender:MsgAddress
    forward_payload:(Either Payload ^Payload)
= JettonTransferNotificationMsg Payload;

transfer#0f8a7ea5 {Payload: Type}
    query_id:uint64
    amount:Coins
    destination:MsgAddress
    response_destination:MsgAddress
    custom_payload:(Maybe ^Cell)
    forward_ton_amount:Coins
    forward_payload:(Either Payload ^Payload)
= JettonTransferMsg Payload;

provide_wallet_address#2c76b973
    query_id:uint64
    owner_address:MsgAddress
    include_address:Bool
= ProvideWalletMsg;

take_wallet_address#d1735400
    query_id:uint64
    wallet_address:MsgAddress
    owner_address:(Maybe ^MsgAddress)
= TakeWalletMsg;

// =======================================================================

// common

purchase_conditions_whitelist$_
    wl_collection_address:MsgAddress
    price_factor:uint128
    price_devider:uint128
    min_purchase_ton:Coins
    max_purchase_ton:Coins
    wl_sbt_code:^Cell
= PurchaseConditionsWhitelist;

purchase_conditions_root$_
    price_factor:uint128
    price_devider:uint128
    min_purchase_ton:Coins
    max_purchase_ton:Coins
    wl_condition_1:Maybe(^PurchaseConditionsWhitelist)
    wl_condition_2:Maybe(^PurchaseConditionsWhitelist)
    wl_condition_3:Maybe(^PurchaseConditionsWhitelist)
    wl_condition_4:Maybe(^PurchaseConditionsWhitelist)
= PurchaseConditionsRoot;

refs_dict$_
    _:(HashmapE 256 [cashback_factor:uint32 discount_factor:uint32])  // (referrer address): (cashback_factor, discount_factor)
= RefsDict;

commission_factors$_
    _:(Hashmap 128 uint32)  // (minimum collected TON): (commission_factor)
= CommissionFactors;

// =======================================================================

// sale_admin.fc

revenue_shares$_
    _:(Hashmap 8 [address:MsgAddress share:uint32])  // (index): (address, share)
= RevenueShare;

creation_fees$_
    _:(Hashmap 128 Coins)  // (maximum collected TON): (fees)
= CreationFees;

// storage:
sale_admin_storage$_
    owner_address:MsgAddress
    jetton_wallet_address:MsgAddress
    revenue_share_addresses:RevenueShare
    creation_fees:CreationFees
    commission_factors:CommissionFactors
    codes:^[
        ico_sale_code:^Cell
        sbt_item_code:^Cell
        ref_wallet_code:^Cell
    ]
= SaleAdminStorage;

// Deploy of a new ico_sale.fc сomes to pool_admin from jetton_wallet_address
// The contract checks that ico_sale_data is correct and
// that the number of tokens sent matches the fixed fee.
// If the action is successful, a new ico_sale contract is deployed
// and the incoming tokens are distributed through the revenue share system
// otherwise, the incoming tokens are sent back to the user or an insufficient gas error occurs.
ico_sale_storage$_
    init:Bool

    sale_start_time:uint32
    sale_end_time:uint32

    min_ton_collected:Coins
    allocated_jettons:Coins
    liquidity_part_ton:uint32
    liquidity_part_jetton:uint32

    ton_collected:Coins  // 0 in case of deployment
    jettons_sold:Coins  // 0 in case of deployment

    first_unlock_time:uint32
    first_unlock_size:uint16
    cycle_length:uint32
    cycles_number:uint16

    jetton_wallet_address:MsgAddress
    jettons_added:Bool  // 0 in case of deployment
    sale_finished:Bool  // 0 in case of deployment
    change_invitee:Bool

    collection_info:^[
        admin_address:MsgAddress
        creator_address:MsgAddress
        content:^Cell
        sbt_item_code:^Cell
    ]

    internal_sale_data:^[
        jetton_root_address:MsgAddress
        native_vault_address:MsgAddress
        jetton_vault_address:MsgAddress
        purchase_conditions:PurchaseConditionsRoot
        commission_factors: CommissionFactors
        min_ref_purchase:Coins
        default_cashback:uint32
        refs_dict:RefsDict
        ref_wallet_code:^Cell
    ]
= IcoSaleStorage;

deploy_ico_sale_payload#16ccca41
    user_sale_data:IcoSaleStorage
 = DeployIcoSalePayload;

deploy_ico_request$_ _:(JettonTransferNotificationMsg DeployIcoSalePayload) = InternalMsgBody;

// Deploy of a new fairlaunch_sale.fc (TODO)
// If the action is successful, a new fairlaunch_sale contract is deployed
// and the incoming tokens are distributed through the revenue share system
// otherwise, the incoming tokens are sent back to the user or an insufficient gas error occurs.


// Sending commissions from sales to sale_admin.fc.
// After successful completion of the sale, a percentage of the funds raised (in the form of TONs or tokens) is sent to sale_admin.
// The commissions are then forwarded according to the `revenue_share_addresses` data
send_ton_commission_request#b96adaea query_id:uint64 = InternalMsgBody;
send_jetton_commission_payload#b96adaea = SendJettonCommissionPayload;
send_jetton_commissions_body$_ _:(JettonTransferNotificationMsg SendJettonCommissionPayload) = InternalMsgBody;

// =======================================================================

// ico_sale.fc & sft_item.fc & ref_wallet.fc

// On deployment, a request is sent to the jetton_root_address to
// receive the actual jetton_wallet address (ProvideWalletMsg). In response, a TakeWalletMsg message is received, and
// if the the sender of the second message is correct, the jetton_wallet_address is changed to the one sent by the minter.

// The initial addition of tokens to a sale contract is a simple transfer with notify with sufficient gas.
// If successful, jettons_added is set to true

// --
// Purchase request from user's wallet, without whitelist:
purchase_ref_request#_
    invitee_address:(Maybe ^MsgAddress)
= InternalMsgBody;

// Request purchase via whitelist, is sent from whitelist SBT:
purchase_whitelist_request#0524c7ae
    wl_sbt_index:uint256
    owner_address:MsgAddress
    _: ^[
        wl_index:uint2
        invitee_address:(Maybe ^MsgAddress)
    ]
= InternalMsgBody;

// If the conditions on the ico_sale contract are successfully checked, a deploy or update of sft_item.fc takes place
// storage:
sft_item_storage$_
    index:uint256  // requester  (wl_sbt or buyer) address int
    sale_address:MsgAddress
    internal_ds:^[
        buyer_address:MsgAddress
        purchased_jettons:Coins
        collected_ton:Coins
        claimed_times:uint16  // 0 in case of deployment
        claimed_jettons:Coins  // 0 in case of deployment
        first_unlock_time:uint32
        first_unlock_size:uint32
        cycle_length:uint32
        cycles_number:uint16
        ref_data:(Maybe ^[ref_address:MsgAddress cashback_factor:uint32])
        refund_requested:Bool  // 0 in case of deployment
        change_invitee:Bool
    ]
= SftItemStorage;

sft_item_init_data$_
    item_index:uint256  // hash part of the owner Address
    sale_address:MsgAddress
= SftItemInitData;

update_sft_message#dca3da4c
    query_id:uint64
    jettons_to_purchase:Coins
    collected_ton:Coins
    max_purchase_ton:Coins
    buyer_address:MsgAddress
    first_unlock_time:uint32
    first_unlock_size:uint32
    cycle_length:uint32
    cycles_number:uint16
    ref_data:(Maybe ^[ref_address:MsgAddress cashback_factor:uint32])
= InternalMsgBody;

// Next is a check on the sft_item.fc contract that the total maximum purchase volume is not exceeded
// If the check is successful, the data in the contract is updated and an approve purchase message is sent:
approve_purchase_message#9f48d36d
    query_id:uint64
    sft_index:uint256
    sft_buyer:MsgAddress
    purchased_jettons:Coins
    received_ton:Coins
    ref_data:(Maybe ^[ref_address:MsgAddress cashback_factor:uint32])
= InternalMsgBody;
// In case of an error, a cancel purchase message is sent, then the previously sent TONs are returned to the user:
cancel_purchase_message#7d1d7445
    query_id:uint64
    sft_index:uint256
    sft_buyer:MsgAddress
    purchased_jettons:Coins
    ton_to_return:Coins
    ref_data:(Maybe ^[ref_address:MsgAddress cashback_factor:uint32])
= InternalMsgBody;
// If the purchase was successful and the purchase amount is greater than min_ref_purchase, the ref_wallet.fc contract is deployed
// Storage:
ref_wallet_storage$_
    owner_address:MsgAddress
    sale_address:MsgAddress
    sale_end_time:uint32
    collected_ton:(Maybe Coins)
= RefWalletStorage;
ref_wallet_deploy_body$0 = InternalMsgBody;

// Also, if the purchase was made using a referral code, the owner of the code will be credited cashback
update_ref_wallet_request#940298fc
    query_id:uint64
    cashback:Coins
    buyer_address:MsgAddress
= InternalMsgBody;

// --
/** If the sale has been successfully completed, then: **/

// 1. When it comes time to unlock, the user can submit a token claiming request by sending a transaction to sft_item.fc:
sft_owner_claim_request#a769de27 query_id:uint64 = InternalMsgBody;
// On the sft_item.fc contract, it is checked that the request has been sent by the owner of the sft_item and the sale has ended
// The number of tokens available for claim process is then calculated and a transaction is sent to ico_sale.fc:
sft_item_claim_request#a769de27
    query_id:uint64
    sft_index:uint256
    sft_buyer:MsgAddress
    available_jettons:Coins
    ton_equivalent:Coins
    ref_data:(Maybe ^[ref_address:MsgAddress cashback_factor:uint32])
= InternalMsgBody;
// The ico_sale.fc contract checks that the sale was completed successfully (minimum funds collected), and if so,
// the purchased tokens are sent to the user, otherwise the "sale_failed" exception occurs

// 2. The owner of the referral code can claim his cashback, to do so he must send a request to ref_wallet.fc
ref_owner_claim_request#1f7b4e41 query_id:uint64 = InternalMsgBody;
// The contract verifies that the request has been sent by the owner, the sale has ended,
// and the cashback amount is greater than the minimum.
// After that, a transaction is sent to ico_sale.fc:
ref_wallet_claim_request#1f7b4e41
    query_id:uint64
    owner_address:MsgAddress
    collected_ton:Coins
= InternalMsgBody;
// The ico_sale.fc contract checks that the sale was completed successfully (minimum funds collected), and if so,
// the accumulated cashback is sent to the user, otherwise a "sale_failed" exception occurs

// 3. Any user can submit a request to deposit into the liquidity pool by sending a transaction to ico_sale.fc:
end_sale_request#cb81bc08 query_id:uint64 = InternalMsgBody;
// The contract verifies that it is nearing the end of the sale and that liquidity has not yet been provided.
// Further:
//    a) The part of tokens not sold and not required for liquidity is burnt off
//    b) A portion of the TONs collected are sent to the creator of the sale
//    c) A portion of the TON collected is sent to Launchpad as royalties
//    d) Liquidity is added:
pool_params_native_jetton$000000001
    jetton_workchain:uint8
    jetton_address_hash:uint256
= PoolParamsNativeJetton;

fulfill_payload#b9b68ef4 = FulfillPayload;
reject_payload#9364a426 = RejectPayload;

lp_assets$0000
    ton_amount:Coins
    jetton_amount:Coins
= LpAssets;

deposit_liquidity_jetton_payload#40e108d6
    pool_params:PoolParamsNativeJetton
    assets:^LpAssets
    fulfill_payload:(Maybe FulfillPayload)
    reject_payload:(Maybe RejectPayload)
= DepositLiquidityJettonPayload;

// Sends to native_vault_address
deposit_liquidity_native_message#d55e4686
    query_id:uint64
    ton_amount:Coins
    pool_params:PoolParamsNativeJetton
    assets:^LpAssets
    fulfill_payload:(Maybe FulfillPayload)
    reject_payload:(Maybe RejectPayload)
= InternalMsgBody;

// The message is sent to jetton_wallet_address, the jettons are transfered to jetton_vault_address
deposit_liquidity_jetton_message#_ (JettonTransferMsg DepositLiquidityJettonPayload) = InternalMsgBody;

/** If the sale was unsuccessfully completed, then: **/

// The buyer can request a refund by sending a request to sft_item.fc
sft_owner_refund_request#1075d7a3 query_id:uint64 = InternalMsgBody;
// On the sft_item.fc contract, it is checked that the request has been sent
// by the owner of the sft_item and the sale has ended.
// The refund_requested parameter then becomes true, and a request is sent to ico_sale.fc:
sft_item_refund_request#1075d7a3
    query_id:uint64
    index:uint256
    buyer:MsgAddress
    purchased_jettons:Coins
    collected_ton:Coins
    ref_data:(Maybe ^[ref_address:MsgAddress cashback_factor:uint32])
= InternalMsgBody;
// On the ico_sale.fc contract, it is checked that the sale was NOT completed successfully (no minimum amount of funds raised), and if so,
// all TONs spent on the purchase by the user are returned to him. Otherwise the "sale_succeed" exception occurs

// --
// Also, you can change some parameters in the sale contract:
// Owner:
change_creator_request#93b05b31
    query_id:uint64
    new_creator_address:MsgAddress
= InternalMsgBody;
// Price (currently only until the start of the sale):
change_purchase_conditions_request#a7dd3e8d
    query_id:uint64
    new_conditions:^PurchaseConditionsRoot
= InternalMsgBody;
// New members of the referral programme with special conditions (currently only until the start of the sale):
add_ref_addresses_request#7ae5c1ca
    query_id:uint64
    new_ref_addresses:RefsDict
= InternalMsgBody;
