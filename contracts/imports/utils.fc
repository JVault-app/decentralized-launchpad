slice null_addr() asm "b{00} PUSHSLICE";

cell  preload_ref_index(slice s, int n) asm "PLDREFVAR";


() send_builder_message(slice to_address, int value, builder payload, int sending_mode) impure inline {
    cell msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(to_address)
                    .store_coins(value)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .store_builder(payload)
                .end_cell();
    send_raw_message(msg, sending_mode);
}


() send_cell_message(slice to_address, int value, cell payload, int sending_mode) impure inline {
    cell msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(to_address)
                    .store_coins(value)
                    .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .store_ref(payload)
                .end_cell();
    send_raw_message(msg, sending_mode);
}


() send_deploy_message(slice to_address, int value, cell state_init, cell payload, int sending_mode) impure inline {
    cell msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(to_address)
                    .store_coins(value)
                    .store_uint(4 + 2, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .store_ref(state_init)
                    .store_maybe_ref(payload)
                .end_cell();
    send_raw_message(msg, sending_mode);
}


() send_message_with_comment(slice to_address, int value, slice comment, int sending_mode) impure inline {
    builder body = begin_cell()
                    .store_uint(0, 32)
                    .store_slice(comment);
    return send_builder_message(to_address, value, body, sending_mode);
}


cell calculate_nft_item_state_init(int item_index, cell nft_item_code, slice collection_address) inline {
    cell data = begin_cell().store_uint(item_index, 64).store_slice(collection_address).end_cell();
    return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}


cell calculate_ref_wallet_state_init(slice owner_address, cell ref_wallet_code, int sale_end_time) inline {
    cell data = begin_cell().store_slice(owner_address).store_slice(my_address()).store_uint(sale_end_time, 32).store_uint(0, 1).end_cell();
    return begin_cell().store_uint(0, 2).store_dict(ref_wallet_code).store_dict(data).store_uint(0, 1).end_cell();
}


slice get_address_by_state_init(cell state_init) inline { 
    return begin_cell().store_uint(1024, 11)
                        .store_uint(cell_hash(state_init), 256)
                        .end_cell()
                        .begin_parse();
}


() send_jettons(int query_id, int jetton_amount, slice to_address, slice response_address, slice jetton_wallet_address, 
                int msg_value, int sending_mode, int forward_ton_amount, cell forward_payload) impure inline {

    builder msg_body = begin_cell()
                        .store_uint(op::transfer_jetton, 32)
                        .store_uint(query_id, 64)
                        .store_coins(jetton_amount)
                        .store_slice(to_address);
    ifnot (null?(response_address)) {
        msg_body = msg_body.store_slice(response_address);
    }
    else {
        msg_body = msg_body.store_uint(0, 2);
    }
    msg_body = msg_body.store_uint(0, 1)
                        .store_coins(forward_ton_amount)
                        .store_uint(1, 1);

    ifnot(null?(forward_payload)) {
        msg_body = msg_body.store_dict(forward_payload);
    }
    else {
        msg_body = msg_body.store_uint(0, 1);
    }

    return send_cell_message(jetton_wallet_address, msg_value, msg_body.end_cell(), sending_mode);
}


() burn_jettons(int query_id, int jetton_amount, slice jetton_wallet_address,
                slice response_address, int msg_value, int sending_mode) impure inline {
    cell msg_body = begin_cell()
                        .store_uint(op::burn_jetton, 32)
                        .store_uint(query_id, 64)
                        .store_coins(jetton_amount)
                        .store_slice(response_address)
                    .end_cell();

    return send_cell_message(jetton_wallet_address, msg_value, msg_body, sending_mode);
}


builder int_to_str(int number) {
    builder string = begin_cell();
    tuple chars = null();
    do {
        int r = number~divmod(10);
        chars = cons(r + 48, chars);
    } until (number == 0);
    do {
        int char = chars~list_next();
        string~store_uint(char, 8);
    } until (null?(chars));
    
    return string;
}
