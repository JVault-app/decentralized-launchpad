#pragma version >=0.4.0;
#include "imports/stdlib.fc";
#include "imports/constants.fc";
#include "imports/utils.fc";


;; Default SBT
global int   storage::index;
global int   storage::init?;
global slice storage::sale_address;
global slice storage::buyer_address;

;; Custom
global int   storage::purchased_jettons;    ;; total purchased tokens
global int   storage::collected_ton;        ;; total collected ton
global int   storage::claimed_times;        ;; number of unlocks withdrawed
global int   storage::claimed_jettons;      ;; amount of claimed jettons
global int   storage::first_unlock_time;    ;; timestamp of the first unlock
global int   storage::first_unlock_size;    ;; size of the first unlock (in percents)
global int   storage::cycle_length;         ;; time between unlocks in seconds
global int   storage::cycles_number;        ;; number of unlocks excluding initial
global cell  storage::ref_data;             ;; data about invitee
global int   storage::refund_requested;
global int   storage::change_invitee?;      ;; is changing user's invitee after first purchase allowed 


() load_data() impure inline {
    slice ds = get_data().begin_parse();

    storage::index              = ds~load_uint(256);
    storage::sale_address = ds~load_msg_addr();
    storage::init?              = false;

    if (ds.slice_bits() > 0) {
        storage::init?             = true;
        storage::buyer_address     = ds~load_msg_addr();

        slice internal_ds = ds~load_ref().begin_parse();
        storage::purchased_jettons = internal_ds~load_coins();
        storage::collected_ton     = internal_ds~load_coins();
        storage::claimed_times     = internal_ds~load_uint(16);
        storage::claimed_jettons   = internal_ds~load_coins();
        
        storage::first_unlock_time = internal_ds~load_uint(32);
        storage::first_unlock_size = internal_ds~load_uint(32);
        storage::cycle_length      = internal_ds~load_uint(32);
        storage::cycles_number     = internal_ds~load_uint(16);
        
        storage::ref_data          = internal_ds~load_dict();
        storage::refund_requested  = internal_ds~load_int(1);
        storage::change_invitee?   = internal_ds~load_int(1);
    }
}


() save_data() impure {
    set_data(
            begin_cell()
                .store_uint(storage::index, 256) 
                .store_slice(storage::sale_address)
                .store_slice(storage::buyer_address)
                .store_ref(
                    begin_cell()
                        .store_coins(storage::purchased_jettons)
                        .store_coins(storage::collected_ton)
                        .store_uint(storage::claimed_times, 16)
                        .store_coins(storage::claimed_jettons)
                        .store_uint(storage::first_unlock_time, 32)
                        .store_uint(storage::first_unlock_size, 32)
                        .store_uint(storage::cycle_length, 32)
                        .store_uint(storage::cycles_number, 16)
                        .store_dict(storage::ref_data)
                        .store_int(storage::refund_requested, 1)
                        .store_int(storage::change_invitee?, 1)
                    .end_cell()
                )
            .end_cell()
    );
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    load_data();

    int op = in_msg_body~load_uint(32);

    if (flags & 1) { ;; route all prove_ownership bounced messages to owner
        ;; first op was 0xffffffff, because of bounced, now we need to read real one
        int op = in_msg_body~load_uint(32);
        if (op == op::ownership_proof) {
            int query_id = in_msg_body~load_uint(64);
            send_builder_message(storage::buyer_address, 0, begin_cell().store_uint(op::ownership_proof_bounced, 32).store_uint(query_id, 64), mode::carry_remaining_gas);
        }
        if (op == op::request_refund) {
            storage::refund_requested = 0;
            save_data();
        }
        return ();
    }

    int query_id = in_msg_body~load_uint(64);

    if (op == op::update_sft_data) {
        throw_unless(405, equal_slices(storage::sale_address, sender_address));

        int new_purchased_jettons = in_msg_body~load_coins();
        int new_collected_ton     = in_msg_body~load_coins();
        int max_collected_ton     = in_msg_body~load_coins();
        slice buyer_address       = in_msg_body~load_msg_addr();

        if (~ storage::init?) {
            storage::purchased_jettons  = new_purchased_jettons;
            storage::collected_ton      = new_collected_ton;
            storage::buyer_address      = buyer_address;
            storage::claimed_times      = 0;
            storage::claimed_jettons    = 0;
            
            storage::first_unlock_time  = in_msg_body~load_uint(32);
            storage::first_unlock_size  = in_msg_body~load_uint(32);
            storage::cycle_length       = in_msg_body~load_uint(32);
            storage::cycles_number      = in_msg_body~load_uint(16);
            storage::change_invitee?    = in_msg_body~load_int(1);
            storage::ref_data           = in_msg_body~load_dict();
            storage::refund_requested   = 0;
        }
        else {
            storage::purchased_jettons += new_purchased_jettons;
            storage::collected_ton += new_collected_ton;

            in_msg_body~skip_bits(32 + 32 + 32 + 16);
            cell ref_data = in_msg_body~load_dict();
            if (storage::change_invitee?) {
                ifnot (null?(ref_data)) {
                    storage::ref_data = in_msg_body~load_dict();
                }
            }
            elseifnot (null?(storage::ref_data) | null?(ref_data)) {
                if (cell_hash(ref_data) != cell_hash(storage::ref_data)) {
                    max_collected_ton = 0;  ;; changing invitee not allowed, so reject purchase
                }
            }
        }

        if ((storage::collected_ton > max_collected_ton) | (~ equal_slices(storage::buyer_address, buyer_address))) {
            cell msg_body = begin_cell()
                                .store_uint(op::cancel_purchase, 32)
                                .store_uint(query_id, 64)
                                .store_uint(storage::index, 256)
                                .store_coins(new_purchased_jettons)
                                .store_coins(new_collected_ton)
                            .end_cell();
            send_cell_message(storage::sale_address, 0, msg_body, mode::carry_remaining_balance);

            return ();
        }
        else {
            raw_reserve(min_tons_for_storage, 0);

            ;; notify buyer
            builder msg_body = begin_cell()
                                    .store_uint(op::transfer_notification, 32)
                                    .store_uint(query_id, 64)
                                    .store_coins(new_purchased_jettons)
                                    .store_slice(storage::sale_address)
                                    .store_uint(0, 1);
            send_builder_message(storage::buyer_address, 0, msg_body, mode::pay_fees_separately);

            ;; approve purchase
            builder msg_body = begin_cell()
                                    .store_uint(op::approve_purchase, 32)
                                    .store_uint(query_id, 64)
                                    .store_uint(storage::index, 256)
                                    .store_coins(new_collected_ton)
                                    .store_dict(storage::ref_data);
            send_builder_message(storage::sale_address, 0, msg_body, mode::carry_remaining_balance);
            
            save_data();
            return ();
        }
    }

    if (op == op::claim) {
        throw_unless(exc::incorrect_sender, equal_slices(storage::buyer_address, sender_address));
        throw_unless(exc::not_unlocked_yet, now() > storage::first_unlock_time);

        int total_unlocks = 1 + min(storage::cycles_number, (now() - storage::first_unlock_time) / storage::cycle_length);
        int available_percent = muldiv((total_unlocks - storage::claimed_times), percent_devider, storage::cycles_number);
        if (storage::claimed_times == 0) {
            available_percent += storage::first_unlock_size;
        }

        int available_jettons = 0;
        if (total_unlocks == storage::cycles_number + 1) {
            available_jettons = storage::purchased_jettons - storage::claimed_jettons;
        }
        else {
            available_jettons = muldiv(storage::purchased_jettons, available_percent, percent_devider);
        }
        
        throw_unless(exc::nothing_to_claim, available_jettons);

        builder msg_body = begin_cell()
                                .store_uint(op::claim, 32)
                                .store_uint(query_id, 64)
                                .store_uint(storage::index, 256)
                                .store_coins(available_jettons);
        send_builder_message(storage::sale_address, 0, msg_body, mode::carry_remaining_gas);

        storage::claimed_times = total_unlocks; 
        storage::claimed_jettons += available_jettons;
        save_data();
        return ();
    }

    if (op == op::request_refund) {
        throw_unless(exc::incorrect_sender, equal_slices(storage::buyer_address, sender_address));
        throw_if(exc::refund_requested, storage::refund_requested);

        builder msg_body = begin_cell()
                                .store_uint(op::request_refund, 32)
                                .store_uint(query_id, 64)
                                .store_uint(storage::index, 256)
                                .store_coins(storage::collected_ton);
        send_builder_message(storage::sale_address, 0, msg_body, mode::carry_remaining_gas);
        
        storage::refund_requested = true;
        save_data();
        return ();
    }

    if (op == op::destroy) {
        throw_unless(exc::incorrect_sender, equal_slices(storage::buyer_address, sender_address));
        throw_unless(exc::sale_not_finished, (storage::claimed_times == storage::cycles_number + 1) | storage::refund_requested);  ;; can burn SBT only after all claims

        send_builder_message(sender_address, 0, begin_cell().store_uint(op::excesses, 32).store_uint(query_id, 64), mode::carry_remaining_balance);
        storage::buyer_address = null_addr();

        save_data();
        return ();
    }

    ;; Default SBT start

    if (op == op::request_owner) {
        slice dest = in_msg_body~load_msg_addr();
        cell body = in_msg_body~load_ref();
        int with_content = in_msg_body~load_uint(1);

        var msg = begin_cell()
                    .store_uint(op::owner_info, 32)
                    .store_uint(query_id, 64)
                    .store_uint(storage::index, 256)
                    .store_slice(sender_address)
                    .store_slice(storage::buyer_address)
                    .store_ref(body)
                    .store_uint(0, 64)
                    .store_uint(with_content, 1);

        if (with_content != 0) {
            msg = msg.store_ref(begin_cell().end_cell());
        }

        send_cell_message(dest, 0, msg.end_cell(), mode::carry_remaining_gas);
        return ();
    }

    if (op == op::prove_ownership) {
        throw_unless(401, equal_slices(storage::buyer_address, sender_address));

        slice dest = in_msg_body~load_msg_addr();
        cell body = in_msg_body~load_ref();
        int with_content = in_msg_body~load_uint(1);

        var msg = begin_cell()
                    .store_uint(op::ownership_proof, 32)
                    .store_uint(query_id, 64)
                    .store_uint(storage::index, 256)
                    .store_slice(storage::buyer_address)
                    .store_ref(body)
                    .store_uint(0, 64)  ;; revoked_at
                    .store_uint(with_content, 1);

        if (with_content != 0) {
            msg = msg.store_ref(begin_cell().end_cell());
        }

        send_cell_message(dest, 0, msg.end_cell(), mode::carry_remaining_gas);
        return ();
    }

    if (op == op::get_static_data) {
        var msg = begin_cell()
                    .store_uint(op::report_static_data, 32)
                    .store_uint(query_id, 64)
                    .store_uint(storage::index, 256)
                    .store_slice(storage::sale_address);

        send_cell_message(sender_address, 0, msg.end_cell(), mode::carry_remaining_gas);
        return ();
    }

    if (op == op::take_excess) {
        throw_unless(401, equal_slices(storage::buyer_address, sender_address));

        ;; reserve amount for storage
        raw_reserve(min_tons_for_storage, 0);

        send_builder_message(sender_address, 0, begin_cell().store_uint(op::excesses, 32).store_uint(query_id, 64), mode::carry_remaining_balance);
        return ();
    }

    if (op == op::transfer) {
        throw(413);
    }
    ;; default SBT end

    throw(0xffff);
}


;;
;;  GET Methods
;;

cell my_code() asm "MYCODE";

(int, slice, slice, cell) get_wallet_data() method_id {
    load_data();
    int claimed_percent = storage::claimed_times ? storage::first_unlock_size : 0;
    claimed_percent += muldiv((storage::claimed_times - 1), percent_devider, storage::cycles_number);
    int claimed_jettons = muldiv(storage::purchased_jettons, claimed_percent, percent_devider);
    return (storage::purchased_jettons - claimed_jettons, storage::buyer_address, storage::sale_address, my_code());
}

;; slice get_authority_address() method_id {
;;     load_data();
;;     return null_addr();
;; }

;; int get_revoked_time() method_id {
;;     load_data();
;;     return 0;
;; }


(int, int, slice, slice, int, int, int, int, int, int, int, int, cell, int) get_storage_data() method_id {
    load_data();

    return (
        storage::init?,
        storage::index,
        storage::sale_address,
        storage::buyer_address,
        storage::purchased_jettons,
        storage::collected_ton,
        storage::claimed_times,
        storage::claimed_jettons,
        storage::first_unlock_time,
        storage::first_unlock_size,
        storage::cycle_length,
        storage::cycles_number,
        storage::ref_data,
        storage::change_invitee?
    );      
}
